package seps_test

import (
	"bytes"
	"crypto/sha256"
	"testing"
	"time"

	"github.com/smartbch/smartbch/internal/bigutils"
	"github.com/stretchr/testify/require"
	"github.com/tendermint/tendermint/crypto/ed25519"

	gethcmn "github.com/ethereum/go-ethereum/common"
	"github.com/smartbch/smartbch/internal/ethutils"
	"github.com/smartbch/smartbch/internal/testutils"
)

var _sep101ABI = ethutils.MustParseABI(`
[
{
  "inputs": [
	{
	  "internalType": "bytes",
	  "name": "key",
	  "type": "bytes"
	},
	{
	  "internalType": "bytes",
	  "name": "value",
	  "type": "bytes"
	}
  ],
  "name": "set",
  "outputs": [],
  "stateMutability": "nonpayable",
  "type": "function"
},
{
  "inputs": [
	{
	  "internalType": "bytes",
	  "name": "key",
	  "type": "bytes"
	}
  ],
  "name": "get",
  "outputs": [
	{
	  "internalType": "bytes",
	  "name": "",
	  "type": "bytes"
	}
  ],
  "stateMutability": "nonpayable",
  "type": "function"
}
]
`)

// see testdata/seps/contracts/SEP101Proxy.sol
var _sep101ProxyCreationBytecode = testutils.HexToBytes(`
608060405234801561001057600080fd5b50610c13806100206000396000f3fe
608060405234801561001057600080fd5b50600436106100625760003560e01c
80632ed82e17146100675780634ce1a10014610085578063a18c751e146100a3
578063bb21b65d146100bf578063d6d7d525146100dd578063f5ff5c76146101
0d575b600080fd5b61006f61012b565b60405161007c919061093a565b604051
80910390f35b61008d61016b565b60405161009a919061093a565b6040518091
0390f35b6100bd60048036038101906100b89190610764565b6101ab565b005b
6100c7610316565b6040516100d491906109b4565b60405180910390f35b6100
f760048036038101906100f2919061071f565b6103a4565b6040516101049190
6109b4565b60405180910390f35b6101156105c4565b60405161012291906109
1f565b60405180910390f35b6040518060400160405280601081526020017f73
65742862797465732c6279746573290000000000000000000000000000000081
52508051906020012081565b6040518060400160405280600a81526020017f67
6574286279746573290000000000000000000000000000000000000000000081
52508051906020012081565b60008061271273ffffffffffffffffffffffffff
ffffffffffffff166040518060400160405280601081526020017f7365742862
797465732c627974657329000000000000000000000000000000008152508051
90602001208787878760405160240161021b9493929190610979565b60405160
2081830303815290604052907bffffffffffffffffffffffffffffffffffffff
ffffffffffffffffff19166020820180517bffffffffffffffffffffffffffff
ffffffffffffffffffffffffffff838183161783525050505060405161028591
90610908565b600060405180830381855af49150503d80600081146102c05760
40519150601f19603f3d011682016040523d82523d6000602084013e6102c556
5b606091505b509150915081819061030d576040517f08c379a0000000000000
0000000000000000000000000000000000000000000081526004016103049190
6109d6565b60405180910390fd5b50505050505050565b600080546103239061
0b3c565b80601f01602080910402602001604051908101604052809291908181
5260200182805461034f90610b3c565b801561039c5780601f10610371576101
0080835404028352916020019161039c565b820191906000526020600020905b
81548152906001019060200180831161037f57829003601f168201915b505050
505081565b606060008061271273ffffffffffffffffffffffffffffffffffff
ffff166040518060400160405280600a81526020017f67657428627974657329
0000000000000000000000000000000000000000000081525080519060200120
8686604051602401610412929190610955565b60405160208183030381529060
4052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff
19166020820180517bffffffffffffffffffffffffffffffffffffffffffffff
ffffffffff838183161783525050505060405161047c9190610908565b600060
405180830381855af49150503d80600081146104b7576040519150601f19603f
3d011682016040523d82523d6000602084013e6104bc565b606091505b509150
9150818190610504576040517f08c379a0000000000000000000000000000000
0000000000000000000000000081526004016104fb91906109d6565b60405180
910390fd5b508080602001905181019061051991906107d9565b600090805190
6020019061052e9291906105ca565b506000805461053c90610b3c565b80601f
0160208091040260200160405190810160405280929190818152602001828054
61056890610b3c565b80156105b55780601f1061058a57610100808354040283
5291602001916105b5565b820191906000526020600020905b81548152906001
019060200180831161059857829003601f168201915b50505050509250505092
915050565b61271281565b8280546105d690610b3c565b906000526020600020
90601f0160209004810192826105f8576000855561063f565b82601f10610611
57805160ff191683800117855561063f565b8280016001018555821561063f57
9182015b8281111561063e578251825591602001919060010190610623565b5b
50905061064c9190610650565b5090565b5b8082111561066957600081600090
5550600101610651565b5090565b600061068061067b84610a29565b6109f856
5b90508281526020810184848401111561069857600080fd5b6106a384828561
0b09565b509392505050565b60008083601f8401126106bd57600080fd5b8235
905067ffffffffffffffff8111156106d657600080fd5b602083019150836001
8202830111156106ee57600080fd5b9250929050565b600082601f8301126107
0657600080fd5b815161071684826020860161066d565b91505092915050565b
6000806020838503121561073257600080fd5b600083013567ffffffffffffff
ff81111561074c57600080fd5b610758858286016106ab565b92509250509250
929050565b6000806000806040858703121561077a57600080fd5b6000850135
67ffffffffffffffff81111561079457600080fd5b6107a0878288016106ab56
5b9450945050602085013567ffffffffffffffff8111156107bf57600080fd5b
6107cb878288016106ab565b925092505092959194509250565b600060208284
0312156107eb57600080fd5b600082015167ffffffffffffffff811115610805
57600080fd5b610811848285016106f5565b91505092915050565b6108238161
0a9c565b82525050565b61083281610aae565b82525050565b60006108448385
610a6f565b9350610851838584610afa565b61085a83610bcc565b8401905093
92505050565b600061087082610a59565b61087a8185610a6f565b935061088a
818560208601610b09565b61089381610bcc565b840191505092915050565b60
006108a982610a59565b6108b38185610a80565b93506108c381856020860161
0b09565b80840191505092915050565b60006108da82610a64565b6108e48185
610a8b565b93506108f4818560208601610b09565b6108fd81610bcc565b8401
91505092915050565b6000610914828461089e565b915081905092915050565b
6000602082019050610934600083018461081a565b92915050565b6000602082
01905061094f6000830184610829565b92915050565b60006020820190508181
036000830152610970818486610838565b90509392505050565b600060408201
90508181036000830152610994818688610838565b9050818103602083015261
09a9818486610838565b905095945050505050565b6000602082019050818103
60008301526109ce8184610865565b905092915050565b600060208201905081
810360008301526109f081846108cf565b905092915050565b60006040519050
81810181811067ffffffffffffffff82111715610a1f57610a1e610b9d565b5b
8060405250919050565b600067ffffffffffffffff821115610a4457610a4361
0b9d565b5b601f19601f8301169050602081019050919050565b600081519050
919050565b600081519050919050565b60008282526020820190509291505056
5b600081905092915050565b600082825260208201905092915050565b600061
0aa782610ada565b9050919050565b60007fffffffff00000000000000000000
00000000000000000000000000000000000082169050919050565b600073ffff
ffffffffffffffffffffffffffffffffffff82169050919050565b8281833760
0083830152505050565b60005b83811015610b27578082015181840152602081
019050610b0c565b83811115610b36576000848401525b50505050565b600060
02820490506001821680610b5457607f821691505b60208210811415610b6857
610b67610b6e565b5b50919050565b7f4e487b71000000000000000000000000
00000000000000000000000000000000600052602260045260246000fd5b7f4e
487b710000000000000000000000000000000000000000000000000000000060
0052604160045260246000fd5b6000601f19601f830116905091905056fea264
697066735822122046db094b0af8218277251b5c59da7e013334eccb2f03a52e
5ab2c033cb0791c564736f6c63430008000033
`)

func deploySEP101Proxy(t *testing.T, _app *testutils.TestApp, privKey string) gethcmn.Address {
	tx, _, contractAddr := _app.DeployContractInBlock(privKey, _sep101ProxyCreationBytecode)
	_app.EnsureTxSuccess(tx.Hash())
	for i := 0; i < 5; i++ {
		if len(_app.GetCode(contractAddr)) == 0 {
			println("code is empty !!!!!!!!!!")
			_app.WaitMS(100)
		} else {
			break
		}
	}
	//require.NotEmpty(t, _app.GetCode(contractAddr))
	return contractAddr
}

func TestSEP101(t *testing.T) {
	privKey, addr := testutils.GenKeyAndAddr()
	_app := testutils.CreateTestApp(privKey)
	defer _app.Destroy()

	// deploy proxy
	contractAddr := deploySEP101Proxy(t, _app, privKey)

	key := []byte{0xAB, 0xCD}
	val := bytes.Repeat([]byte{0x12, 0x34}, 500)

	// call set()
	data := _sep101ABI.MustPack("set", key, val)
	tx, _ := _app.MakeAndExecTxInBlock(privKey, contractAddr, 0, data)
	_app.EnsureTxSuccess(tx.Hash())

	// call get()
	data = _sep101ABI.MustPack("get", key)
	statusCode, statusStr, output := _app.Call(addr, contractAddr, data)
	require.Equal(t, 0, statusCode)
	require.Equal(t, "success", statusStr)
	require.Equal(t, []interface{}{val}, _sep101ABI.MustUnpack("get", output))

	// read val through getStorageAt()
	sKey := sha256.Sum256(key)
	sVal := _app.GetStorageAt(contractAddr, sKey[:])
	require.Equal(t, val, sVal)

	// get non-existing key
	data = _sep101ABI.MustPack("get", []byte{9, 9, 9})
	statusCode, statusStr, output = _app.Call(addr, contractAddr, data)
	require.Equal(t, "success", statusStr)
	require.Equal(t, 0, statusCode)
	require.Equal(t, []interface{}{[]byte{}}, _sep101ABI.MustUnpack("get", output))
}

func TestSEP101_setZeroLenKey(t *testing.T) {
	privKey, _ := testutils.GenKeyAndAddr()
	_app := testutils.CreateTestApp(privKey)
	defer _app.Destroy()

	// deploy proxy
	contractAddr := deploySEP101Proxy(t, _app, privKey)

	// set() with zero-len key
	data := _sep101ABI.MustPack("set", []byte{}, []byte{1, 2, 3})
	tx, _ := _app.MakeAndExecTxInBlock(privKey, contractAddr, 0, data)
	_app.EnsureTxFailed(tx.Hash(), "revert")
}

func TestSEP101_setKeyTooLong(t *testing.T) {
	privKey, _ := testutils.GenKeyAndAddr()
	_app := testutils.CreateTestApp(privKey)
	defer _app.Destroy()

	// deploy proxy
	contractAddr := deploySEP101Proxy(t, _app, privKey)

	// set() with looooong key
	data := _sep101ABI.MustPack("set", bytes.Repeat([]byte{39}, 257), []byte{1, 2, 3})
	tx, _ := _app.MakeAndExecTxInBlock(privKey, contractAddr, 0, data)
	_app.EnsureTxFailed(tx.Hash(), "revert")
}

func TestSEP101_setValTooLong(t *testing.T) {
	startTime := time.Now()
	initBal := bigutils.NewU256(testutils.DefaultInitBalance)
	valPubKey := ed25519.GenPrivKey().PubKey()
	privKey, _ := testutils.GenKeyAndAddr()
	var stateRoot []byte
	for i := 0; i < 2000; i++ {
		println("Xxxxxx", i)
		//time.Sleep(1 * time.Second)
		_app := testutils.CreateTestApp0(startTime, initBal, valPubKey, privKey)
		//defer _app.Destroy()

		// deploy proxy
		contractAddr := deploySEP101Proxy(t, _app, privKey)
		//_app.WaitMS(50)

		if i == 0 {
			stateRoot = _app.StateRoot
		} else {
			require.Equal(t, stateRoot, _app.StateRoot)
		}

		// set() with looooong val
		key := []byte{1, 2, 3}
		val := bytes.Repeat([]byte{39}, 24*1024+1)
		data := _sep101ABI.MustPack("set", key, val)
		tx, _ := _app.MakeAndExecTxInBlock(privKey, contractAddr, 0, data)
		_app.EnsureTxFailed(tx.Hash(), "revert")
		//if _app.GetTx(tx.Hash()).Status == gethtypes.ReceiptStatusSuccessful {
		//	println("SSSSSS?????")
		//	data = _sep101ABI.MustPack("get", key)
		//	statusCode, statusStr, output := _app.Call(addr, contractAddr, data)
		//	require.Equal(t, 0, statusCode)
		//	require.Equal(t, "success", statusStr)
		//	require.Equal(t, []interface{}{val}, _sep101ABI.MustUnpack("get", output))
		//}

		_app.Destroy()
	}
}
